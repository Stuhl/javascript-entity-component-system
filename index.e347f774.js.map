{"mappings":"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","sources":["src/example.ts","src/index.ts"],"sourcesContent":["import { EntityComponentSystem, Component, Processor, Entity } from \"./index\"\r\n\r\nconst ecs = new EntityComponentSystem()\r\n\r\nconst positionComponent: Component = {\r\n  name : \"position\",\r\n  state: {\r\n    x: 0,\r\n    y: 0\r\n  }\r\n}\r\n\r\nconst massComponent: Component = {\r\n  name : \"mass\",\r\n  state: {\r\n    mass     : 0.2,\r\n    velocityX: 1,\r\n    velocityY: 0\r\n  }\r\n}\r\n\r\nconst shapeComponent: Component = {\r\n  name : \"shape\",\r\n  state: {\r\n    size : 10,\r\n    color: \"red\"\r\n  }\r\n}\r\n\r\nconst collisionComponent: Component = {\r\n  name : \"collision\",\r\n  state: {\r\n    collisionX: false,\r\n    collisionY: false\r\n  }\r\n}\r\n\r\nconst gravityProcessor: Processor = {\r\n  name    : \"gravity_processor\",\r\n  required: [\"position\", \"mass\"],\r\n  update(entity: Entity, components: Component[], processor: Processor) {\r\n    const [position, mass] = components\r\n\r\n    mass.state.velocityY += mass.state.mass\r\n\r\n    position.state.y += mass.state.velocityY\r\n    position.state.x += mass.state.velocityX\r\n  }\r\n}\r\n\r\nconst shapeDrawProcessor: Processor = {\r\n  name    : \"shape_draw_processor\",\r\n  required: [\"position\", \"shape\"],\r\n  update(entity: Entity, components: Component[], processor: Processor) {\r\n    const [position, shape] = components\r\n\r\n    context.translate(position.state.x, position.state.y)\r\n    context.fillStyle = shape.state.color\r\n    context.fillRect(0, 0, shape.state.size, shape.state.size)\r\n    context.translate(-position.state.x, -position.state.y)\r\n  }\r\n}\r\n\r\nconst edgeCollisionProcessor: Processor = {\r\n  name: \"edge_collision_processor\",\r\n  required: [\"position\", \"collision\", \"shape\"],\r\n  update(entity: Entity, components: Component[], processor: Processor) {\r\n    const [position, collision, shape] = components\r\n\r\n    const x    = position.state.x\r\n    const y    = position.state.y\r\n    const size = shape.state.size\r\n\r\n    if (x <= 0 || x + size >= canvas.width) {\r\n      collision.state.collisionX = true\r\n    } else {\r\n      collision.state.collisionX = false\r\n    }\r\n\r\n    if (y <= 0 || y + size >= canvas.height) {\r\n      collision.state.collisionY = true\r\n    } else {\r\n      collision.state.collisionY = false\r\n    }\r\n  }\r\n}\r\n\r\nconst bounceProcessor: Processor = {\r\n  name    : \"bounce_processor\",\r\n  required: [\"position\", \"collision\", \"mass\"],\r\n  update(entity: Entity, components: Component[], processor: Processor) {\r\n    const [position, collision, mass] = components\r\n\r\n    if (collision.state.collisionY) {\r\n      mass.state.velocityY = -mass.state.velocityY\r\n    }\r\n\r\n    if (collision.state.collisionX) {\r\n      mass.state.velocityX = -mass.state.velocityX\r\n    }\r\n  }\r\n}\r\n\r\nconst jitterProcessor: Processor = {\r\n  name: \"jitter_processor\",\r\n  required: [\"position\"],\r\n  update(entity: Entity, components: Component[], processor: Processor) {\r\n    const [position] = components\r\n\r\n    position.state.x += Math.random() * (5 - -5) - 5\r\n    position.state.y += Math.random() * (5 - -5) - 5\r\n  }\r\n}\r\n\r\necs.addComponent(positionComponent)\r\necs.addComponent(massComponent)\r\necs.addComponent(shapeComponent)\r\necs.addComponent(collisionComponent)\r\n\r\necs.addProcessor(gravityProcessor)\r\necs.addProcessor(shapeDrawProcessor)\r\necs.addProcessor(edgeCollisionProcessor)\r\necs.addProcessor(bounceProcessor)\r\necs.addProcessor(jitterProcessor)\r\n\r\nconst canvas  = document.querySelector(\"canvas\")\r\nconst context = canvas.getContext(\"2d\")\r\n\r\nconst gameloop = () => {\r\n  context.clearRect(0, 0, canvas.width, canvas.height)\r\n\r\n  ecs.update()\r\n  requestAnimationFrame(gameloop)\r\n}\r\n\r\nlet hasGravity = true\r\nlet hasCollision = true\r\nlet hasJitter = false\r\n\r\nconst addDefaultBox = () => {\r\n  const processors = [\"shape_draw_processor\", \"bounce_processor\"]\r\n\r\n  if (hasGravity) {\r\n    processors.push(\"gravity_processor\")\r\n  }\r\n\r\n  if (hasCollision) {\r\n    processors.push(\"edge_collision_processor\")\r\n  }\r\n\r\n  if (hasJitter) {\r\n    processors.push(\"jitter_processor\")\r\n  }\r\n\r\n  const box = ecs.createEntity(\"box\", [\r\n    \"position\",\r\n    \"mass\",\r\n    \"shape\",\r\n    \"collision\"\r\n  ], processors)\r\n\r\n  ecs.addEntity(box)\r\n}\r\n\r\nconst addRandomBox = (amount: number): void => {\r\n  const processors = [\"shape_draw_processor\", \"bounce_processor\"]\r\n\r\n  if (hasGravity) {\r\n    processors.push(\"gravity_processor\")\r\n  }\r\n\r\n  if (hasCollision) {\r\n    processors.push(\"edge_collision_processor\")\r\n  }\r\n\r\n  if (hasJitter) {\r\n    processors.push(\"jitter_processor\")\r\n  }\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    const box = ecs.createEntity(\"box\", [\r\n      \"position\",\r\n      \"mass\",\r\n      \"shape\",\r\n      \"collision\"\r\n    ], processors)\r\n\r\n    const [position, shape, mass] = ecs.getEntityComponents(box, [\"position\", \"shape\", \"mass\"])\r\n\r\n    const colors = [\"green\", \"blue\", \"orange\", \"red\", \"white\"]\r\n    const randomColor = colors[Math.floor(Math.random() * colors.length)]\r\n    const randomMass = Math.random() * 0.5 + 0.1\r\n    const randomSize = Math.random() * 15\r\n    const randomX = Math.random() * canvas.width\r\n    const randomY = Math.random() * canvas.height\r\n    const randomVelocityX = Math.random() * (1 - -1) + -1\r\n\r\n    position.state.x = randomX\r\n    position.state.y = randomY\r\n    shape.state.color = randomColor\r\n    shape.state.size = randomSize\r\n    mass.state.mass = randomMass\r\n    mass.state.velocityX = randomVelocityX\r\n\r\n    ecs.addEntity(box)\r\n  }\r\n}\r\n\r\n// CHECKBOXES\r\nconst gravityCheckbox = document.getElementById(\"gravity-checkbox\") as HTMLInputElement\r\nconst collisionCheckbox = document.getElementById(\"collision-checkbox\") as HTMLInputElement\r\nconst jitterCheckbox = document.getElementById(\"jitter-checkbox\") as HTMLInputElement\r\n\r\ngravityCheckbox.addEventListener(\"change\", () => {\r\n  const checked = gravityCheckbox.checked\r\n  const entities = ecs.getEntitiesByName(\"box\")\r\n\r\n  if (!checked) {\r\n    hasGravity = false\r\n    for (let entity of entities) {\r\n      ecs.removeProcessorFromEntity(entity, \"gravity_processor\")\r\n    }\r\n  }\r\n\r\n  if (checked) {\r\n    hasGravity = true\r\n    for (let entity of entities) {\r\n      ecs.addProcessorToEntity(entity, \"gravity_processor\")\r\n    }\r\n  }\r\n})\r\n\r\ncollisionCheckbox.addEventListener(\"change\", () => {\r\n  const checked = collisionCheckbox.checked\r\n  const entities = ecs.getEntitiesByName(\"box\")\r\n\r\n  if (!checked) {\r\n    hasCollision = false\r\n    for (let entity of entities) {\r\n      ecs.removeProcessorFromEntity(entity, \"edge_collision_processor\")\r\n    }\r\n  }\r\n\r\n  if (checked) {\r\n    hasCollision = true\r\n    for (let entity of entities) {\r\n      ecs.addProcessorToEntity(entity, \"edge_collision_processor\")\r\n    }\r\n  }\r\n})\r\n\r\njitterCheckbox.addEventListener(\"change\", () => {\r\n  const checked = jitterCheckbox.checked\r\n  const entities = ecs.getEntitiesByName(\"box\")\r\n\r\n  if (!checked) {\r\n    hasJitter = false\r\n    for (let entity of entities) {\r\n      ecs.removeProcessorFromEntity(entity, \"jitter_processor\")\r\n    }\r\n  }\r\n\r\n  if (checked) {\r\n    hasJitter = true\r\n    for (let entity of entities) {\r\n      ecs.addProcessorToEntity(entity, \"jitter_processor\")\r\n    }\r\n  }\r\n})\r\n\r\n// BUTTONS\r\nconst randomBoxButton   = document.getElementById(\"random-box-button\")\r\nconst randomBoxButton50 = document.getElementById(\"random-box-button-50\")\r\nconst resetButton       = document.getElementById(\"reset-button\")\r\n\r\nrandomBoxButton.addEventListener(\"click\", () => {\r\n  addRandomBox(1)\r\n})\r\n\r\nrandomBoxButton50.addEventListener(\"click\", () => {\r\n  addRandomBox(50)\r\n})\r\n\r\nconst resetState = () => {\r\n  ecs.removeAllEntities()\r\n  addDefaultBox()\r\n}\r\n\r\nresetButton.addEventListener(\"click\", () => {\r\n  resetState()\r\n})\r\n\r\naddDefaultBox()\r\ngameloop()","export type Component = {\r\n  name     : string\r\n  state    : {\r\n    [key: string]: any\r\n  }\r\n  onAttach?: Function\r\n}\r\n\r\nexport type Processor = {\r\n  name    : string\r\n  required: string[]\r\n  update(entity: Entity, components: Component[], processor: Processor): void\r\n}\r\n\r\nexport type Entity = {\r\n  name      : string\r\n  components: Component[]\r\n  processors: Processor[]\r\n}\r\n\r\n/**\r\n * The Entity Component System class.\r\n */\r\nexport class EntityComponentSystem {\r\n  /**\r\n   * All registered components\r\n   * @defaultValue []\r\n   */\r\n  components: Component[]\r\n\r\n  /**\r\n   * All registered processors\r\n   * @defaultValue []\r\n   */\r\n  processors: Processor[]\r\n\r\n  /**\r\n   * All registered entities\r\n   * @defaultValue []\r\n   */\r\n  entities: Entity[]\r\n\r\n  constructor() {\r\n    this.components = []\r\n    this.processors = []\r\n    this.entities   = []\r\n  }\r\n\r\n  /**\r\n   * Gets all registered processors.\r\n   * @returns All registered processors in an array.\r\n   */\r\n  getProcessors(): Processor[] {\r\n    return this.processors\r\n  }\r\n\r\n  /**\r\n   * Gets all components processors.\r\n   * @returns All registered components in an array.\r\n   */\r\n  getComponents(): Component[] {\r\n    return this.components\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities.\r\n   * @returns All registered entities in an array.\r\n   */\r\n  getEntities(): Entity[] {\r\n    return this.entities\r\n  }\r\n\r\n  /**\r\n   * Gets a registered processor by name.\r\n   * @param name - Name of the processor\r\n   * @returns A processor or throws an error.\r\n   */\r\n  getProcessor(name: string): Processor {\r\n    const hasProcessor = this.hasProcessor(name)\r\n\r\n    if (!hasProcessor) {\r\n      throw new Error(`getProcessor(): processor \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.processors.find((processor) => processor.name === name) as Processor\r\n  }\r\n\r\n  /**\r\n   * Gets a registered component by name.\r\n   * @param name - Name of the component\r\n   * @returns A component or throws an error.\r\n   */\r\n  getComponent(name: string): Component {\r\n    const hasComponent = this.hasComponent(name)\r\n\r\n    if (!hasComponent) {\r\n      throw new Error(`getComponent(): component \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.components.find((component) => component.name === name) as Component\r\n  }\r\n\r\n  /**\r\n   * Gets a registered entity by name.\r\n   * @param name -Name of the entity\r\n   * @returns A entity or throws an error. \r\n   */\r\n  getEntity(name: string): Entity {\r\n    const hasEntity = this.hasEntity(name)\r\n\r\n    if (!hasEntity) {\r\n      throw new Error(`getEntity(): entity \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.entities.find((entity) => entity.name === name) as Entity\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities that match the given name.\r\n   * @param name -Name of the entity\r\n   * @returns An array of entities or an empty array.\r\n   */\r\n  getEntitiesByName(name: string): Entity[] {\r\n    const entities = []\r\n    const length   = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const currentEntity = this.entities[i]\r\n\r\n      if (currentEntity.name === name) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n    \r\n    return entities\r\n  }\r\n\r\n  getEntityComponents(entity: Entity, components: string[]): Component[] {\r\n    const foundComponents = []\r\n    const length          = entity.components.length\r\n\r\n    for (let currentComponent of components) {\r\n      for (let i = 0; i < length; i++) {\r\n        const currentEntityComponent = entity.components[i]\r\n\r\n        if (currentEntityComponent.name === currentComponent) {\r\n          foundComponents.push(currentEntityComponent)\r\n        }\r\n      }\r\n    }\r\n\r\n    return foundComponents\r\n  }\r\n\r\n  /**\r\n   * Checks if processor is registered by name.\r\n   * @param name - Name of the processor\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasProcessor(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let processor of this.processors) {\r\n      if (processor.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if component is registered.\r\n   * @param name - Name of the component\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasComponent(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let component of this.components) {\r\n      if (component.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if entity is registered.\r\n   * @param name - Name of the entity\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasEntity(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let entity of this.entities) {\r\n      if (entity.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Composes a entity with given components.\r\n   * @param name - Name of the entity\r\n   * @param components - An array of component names\r\n   * @param processors - An array of processor names\r\n   * @returns The composed entity or throws an error.\r\n   */\r\n  createEntity(name: string, components: string[], processors: string[]): Entity {\r\n    const entityName = name\r\n    const allComponents = []\r\n    const allProcessors = []\r\n\r\n    components.forEach(componentName => {\r\n      const foundComponent = this.getComponent(componentName)\r\n      const copy           = JSON.parse(JSON.stringify(foundComponent))\r\n\r\n      if (copy.onAttach) {\r\n        foundComponent.onAttach()\r\n      }\r\n\r\n      allComponents.push(copy)\r\n    })\r\n\r\n    processors.forEach(processorName => {\r\n      const foundProcessor = this.getProcessor(processorName)\r\n\r\n      allProcessors.push(foundProcessor)\r\n    })\r\n\r\n    return {\r\n      name: entityName,\r\n      components: allComponents,\r\n      processors: allProcessors\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target component.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns true if entity has the component or false if not\r\n   */\r\n  entityHasComponent(entity: Entity, component: string): boolean {\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target processor.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns true if entity has the processor or false if not\r\n   */\r\n  entityHasProcessor(entity: Entity, processor: string): boolean {\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Removes a component from an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation successful or throw an error.\r\n   */\r\n  removeComponentFromEntity(entity: Entity, component: string): void {\r\n    if (!this.entityHasComponent(entity, component)) {\r\n      throw new Error(`removeComponentFromEntity(): component ${component} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.components.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Removes processor from an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation successful or throws an error.\r\n   */\r\n  removeProcessorFromEntity(entity: Entity, processor: string): void {\r\n    if (!this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`removeProcessorFromEntity(): Processor ${processor} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.processors.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addComponentToEntity(entity: Entity, component: string): void {\r\n    if (this.entityHasComponent(entity, component)) {\r\n      throw new Error(`addComponentToEntity(): Can't add component ${component} - this entity already has this component.`)\r\n    }\r\n\r\n    if (!this.hasComponent(component)) {\r\n      throw new Error(`addComponentToEntity(): You can't add component ${component} to entity ${entity.name}, because the component is not registered.`)\r\n    }\r\n\r\n    entity.components.push(this.getComponent(component))\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addProcessorToEntity(entity: Entity, processor: string): void {\r\n    if (this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`addProcessorToEntity(): Can't add processor ${processor} - this entity already this processor.`)\r\n    }\r\n\r\n    if (!this.hasProcessor(processor)) {\r\n      throw new Error(`addProcessorToEntity(): You can't add processor ${processor} to entity ${entity.name}, because the processor is not registerd.`)\r\n    }\r\n\r\n    entity.processors.push(this.getProcessor(processor))\r\n  }\r\n\r\n  /**\r\n   * Adds a entity to the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful\r\n   */\r\n  addEntity(entity: Entity): void {\r\n    this.entities.push(entity)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to the system.\r\n   * @param component - component object\r\n   * @returns Void if successful\r\n   */\r\n  addComponent(component: Component): void {\r\n    const passedComponent = component as Component\r\n\r\n    if (passedComponent.onAttach) {\r\n      passedComponent.onAttach()\r\n    }\r\n\r\n    this.components.push(passedComponent)\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to the system.\r\n   * @param processor - processor object\r\n   * @returns Void if successful\r\n   */\r\n  addProcessor(processor: Processor): void {\r\n    this.processors.push(processor)\r\n  }\r\n\r\n  /**\r\n   * Removes an entity from the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful or throws an error.\r\n   */\r\n  removeEntity(entity: Entity): void {\r\n    const length = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (this.entities[i] === entity) {\r\n        this.entities.splice(i, 1)\r\n        return\r\n      }\r\n    }\r\n\r\n    throw new Error(`removeEntity(): entity \"${entity.name}\" not found.`)\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes all entities from the system.\r\n   * @returns void\r\n   */\r\n  removeAllEntities(): void {\r\n    this.entities = []\r\n  }\r\n\r\n  /**\r\n   * Gets all entities that have the target component registered.\r\n   * @param componentName - Name of the component\r\n   * @returns All entities in an array.\r\n   */\r\n  private getEntitiesFromRequiredComponents(components: string[]): Entity[] {\r\n    const entities = []\r\n    let entitiesAmount = this.entities.length\r\n\r\n    for (let i = 0; i < entitiesAmount; i++) {\r\n      const currentEntity = this.entities[i]\r\n      let hasAllComponents = true\r\n\r\n      for (let j = 0; j < components.length; j++) {\r\n        const currentComponent = components[j]\r\n        \r\n        if (!this.entityHasComponent(currentEntity, currentComponent)) {\r\n          hasAllComponents = false\r\n          break\r\n        }\r\n      }\r\n\r\n      if (hasAllComponents) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n\r\n    return entities\r\n  }\r\n\r\n\r\n  /**\r\n   * Runs all processors for it's corresponding components e.g. run the prcoessors update function.\r\n   * @returns Void if successful\r\n   */\r\n  private runProcessors(): void {\r\n    this.processors.forEach(processor => {\r\n      const entities     = this.getEntitiesFromRequiredComponents(processor.required)\r\n      const entityAmount = entities.length\r\n\r\n      for (let i = 0; i < entityAmount; i++) {\r\n        const currentEntity = entities[i]\r\n        const hasProcessor  = this.entityHasProcessor(currentEntity, processor.name)\r\n\r\n        if (hasProcessor) {\r\n          const components = this.getEntityComponents(currentEntity, processor.required)\r\n          processor.update(currentEntity, components, processor)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs all processors. This should be done per frame e.g. inside your gameloop.\r\n   * @returns Void if successful\r\n   */\r\n  update(): void {\r\n    this.runProcessors()\r\n  }\r\n}"],"names":["$d57fdcc662c2edca$var$ecs","constructor","this","components","processors","entities","getProcessors","getComponents","getEntities","getProcessor","name","hasProcessor","Error","find","processor","getComponent","hasComponent","component","getEntity","hasEntity","entity","getEntitiesByName","length","i","currentEntity","push","getEntityComponents","foundComponents","currentComponent","currentEntityComponent","found","createEntity","entityName","allComponents","allProcessors","forEach","componentName","foundComponent","copy","JSON","parse","stringify","onAttach","processorName","foundProcessor","entityHasComponent","entityHasProcessor","removeComponentFromEntity","index","splice","removeProcessorFromEntity","addComponentToEntity","addProcessorToEntity","addEntity","addComponent","passedComponent","addProcessor","removeEntity","removeAllEntities","getEntitiesFromRequiredComponents","entitiesAmount","hasAllComponents","j","runProcessors","required","entityAmount","update","$d57fdcc662c2edca$var$gravityProcessor","position","mass","state","velocityY","y","x","velocityX","$d57fdcc662c2edca$var$shapeDrawProcessor","shape","$d57fdcc662c2edca$var$context","translate","fillStyle","color","fillRect","size","$d57fdcc662c2edca$var$edgeCollisionProcessor","collision","$d57fdcc662c2edca$var$canvas","width","collisionX","height","collisionY","$d57fdcc662c2edca$var$bounceProcessor","$d57fdcc662c2edca$var$jitterProcessor","Math","random","document","querySelector","getContext","$d57fdcc662c2edca$var$gameloop","clearRect","requestAnimationFrame","$d57fdcc662c2edca$var$hasGravity","$d57fdcc662c2edca$var$hasCollision","$d57fdcc662c2edca$var$hasJitter","$d57fdcc662c2edca$var$addDefaultBox","box","$d57fdcc662c2edca$var$addRandomBox","amount","colors","randomColor","floor","randomMass","randomSize","randomX","randomY","randomVelocityX","$d57fdcc662c2edca$var$gravityCheckbox","getElementById","$d57fdcc662c2edca$var$collisionCheckbox","$d57fdcc662c2edca$var$jitterCheckbox","addEventListener","checked","$d57fdcc662c2edca$var$randomBoxButton","$d57fdcc662c2edca$var$randomBoxButton50","$d57fdcc662c2edca$var$resetButton"],"version":3,"file":"index.e347f774.js.map"}