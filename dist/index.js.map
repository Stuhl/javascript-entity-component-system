{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["export type Component = {\r\n  name : string\r\n  state: object\r\n  onAttach?: Function\r\n}\r\n\r\nexport type ComponentArgument = {\r\n  name  : string\r\n  state?: object\r\n}\r\n\r\nexport type Processor = {\r\n  name  : string\r\n  target: string\r\n  update(component: Component, entities: Entity[]): void\r\n}\r\n\r\nexport type Entity = {\r\n  name      : string\r\n  components: string[]\r\n  state     : {\r\n    [key: string]: any\r\n  }\r\n  update?: Function\r\n}\r\n\r\n/**\r\n * The Entity Component System class.\r\n */\r\nexport class EntityComponentSystem {\r\n  /**\r\n   * All registered components\r\n   * @defaultValue []\r\n   */\r\n  components: Component[]\r\n\r\n  /**\r\n   * All registered processors\r\n   * @defaultValue []\r\n   */\r\n  processors: Processor[]\r\n\r\n  /**\r\n   * All registered entities\r\n   * @defaultValue []\r\n   */\r\n  entities  : Entity[]\r\n  \r\n  constructor() {\r\n    this.components = []\r\n    this.processors = []\r\n    this.entities   = []\r\n  }\r\n\r\n  /**\r\n  * Gets registered processor names.\r\n  * @returns All registered processor names in an array.\r\n  */\r\n  getProcessorNames(): string[] {\r\n    return this.processors.map(processor => processor.name)\r\n  }\r\n\r\n  /**\r\n   * Gets all registered processors.\r\n   * @returns All registered processors in an array.\r\n   */\r\n  getProcessors(): Processor[] {\r\n    return this.processors\r\n  }\r\n\r\n  /**\r\n   * Gets all components processors.\r\n   * @returns All registered components in an array.\r\n   */\r\n  getComponents(): Component[] {\r\n    return this.components\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities.\r\n   * @returns All registered entities in an array.\r\n   */\r\n  getEntities(): Entity[] {\r\n    return this.entities\r\n  }\r\n\r\n  /**\r\n   * Gets a registered processor by name.\r\n   * @param name - Name of the processor\r\n   * @returns A processor or throws an error.\r\n   */\r\n  getProcessor(name: string): Processor {\r\n    const hasProcessor = this.hasProcessor(name)\r\n\r\n    if (!hasProcessor) {\r\n      throw new Error(`getProcessor(): processor \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.processors.find((processor) => processor.name === name) as Processor\r\n  }\r\n\r\n  /**\r\n   * Gets a registered component by name.\r\n   * @param name - Name of the component\r\n   * @returns A component or throws an error.\r\n   */\r\n  getComponent(name: string): Component {\r\n    const hasComponent = this.hasComponent(name)\r\n\r\n    if (!hasComponent) {\r\n      throw new Error(`getComponent(): component \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.components.find((component) => component.name === name) as Component\r\n  }\r\n\r\n  /**\r\n   * Gets a registered entity by name.\r\n   * @param name -Name of the entity\r\n   * @returnsA A entity or throws an error. \r\n   */\r\n  getEntity(name: string): Entity {\r\n    const hasEntity = this.hasEntity(name)\r\n\r\n    if (!hasEntity) {\r\n      throw new Error(`getEntity(): entity \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.entities.find((entity) => entity.name === name) as Entity\r\n  }\r\n\r\n  /**\r\n   * Checks if processor is registered by name.\r\n   * @param name - Name of the processor\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasProcessor(name: string): boolean {\r\n    let found = false\r\n    \r\n    for (let processor of this.processors) {\r\n      if (processor.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if component is registered.\r\n   * @param name - Name of the component\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasComponent(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let component of this.components) {\r\n      if (component.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if entity is registered.\r\n   * @param name - Name of the entity\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasEntity(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let entity of this.entities) {\r\n      if (entity.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Composes a entity with given components.\r\n   * @param name - Name of the entity\r\n   * @param components - An array of component names\r\n   * @returns The composed entity or throws an error.\r\n   */\r\n  createEntity(name: string, components: string[]): Entity {\r\n    let entity = {\r\n      name,\r\n      components,\r\n      state: {}\r\n    }\r\n\r\n    components.forEach(component => {\r\n      const foundComponent = this.components.find((ECSComponent) => component === ECSComponent.name)\r\n\r\n      if (!foundComponent) {\r\n        throw new Error(`createEntity(): component ${component} not found. You probably forgot to register the component in the system.`)\r\n      }\r\n\r\n      if (foundComponent.onAttach) {\r\n        foundComponent.onAttach()\r\n      }\r\n\r\n      entity.state = Object.assign(entity.state, foundComponent.state)\r\n    })\r\n\r\n    return entity\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target component.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns true if entity has the component or false if not\r\n   */\r\n  entityHasComponent(entity: Entity, component: string): boolean {\r\n    return entity.components.includes(component)\r\n  }\r\n\r\n  /**\r\n   * Removes component from an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation successful or throw an error.\r\n   */\r\n  removeComponentFromEntity(entity: Entity, targetComponent: string): void {\r\n    const indexOfComponent = entity.components.indexOf(targetComponent)\r\n\r\n    if (indexOfComponent === -1) {\r\n      throw new Error(`removeComponentFromEntity(): component ${targetComponent} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    entity.components = entity.components.filter(component => component !== targetComponent)\r\n    const component   = this.getComponent(targetComponent)\r\n    const keys        = Object.keys(component.state)\r\n\r\n    keys.forEach(key => {\r\n      delete entity[key]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds a component to an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addComponentToEntity(entity: Entity, component: string): void {\r\n    if (this.entityHasComponent(entity, component)) {\r\n      throw new Error(`addComponentToEntity(): Can't add component ${component} - this entity already has this component.`)\r\n    }\r\n\r\n    const isComponentRegistered = this.hasComponent(component)\r\n\r\n    if (!isComponentRegistered) {\r\n      throw new Error(`addComponentToEntity(): You can't add component ${component} to entity ${entity}, because the component is not registered.`)\r\n    }\r\n\r\n    const targetComponent = this.getComponent(component)\r\n\r\n    entity.state = Object.assign(entity.state, targetComponent.state ? targetComponent.state : {})\r\n    entity.components.push(targetComponent.name)\r\n  }\r\n\r\n  /**\r\n   * Adds a entity to the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful\r\n   */\r\n  addEntity(entity: Entity): void {\r\n    this.entities.push(entity)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to the system.\r\n   * @param component - component object\r\n   * @returns Void if successful\r\n   */\r\n  addComponent(component: ComponentArgument): void {\r\n    const passedComponent = component as Component\r\n    passedComponent.state = component.state ? passedComponent.state : {}\r\n\r\n    if (passedComponent.onAttach) {\r\n      passedComponent.onAttach()\r\n    }\r\n\r\n    this.components.push(passedComponent)\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to the system.\r\n   * @param processor - processor object\r\n   * @returns Void if successful\r\n   */\r\n  addProcessor(processor: Processor): void {\r\n    this.processors.push(processor)\r\n  }\r\n\r\n  /**\r\n   * Removes an entity from the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful or throws an error.\r\n   */\r\n  removeEntity(entity: Entity): void {\r\n    const indexOf = this.entities.indexOf(entity)\r\n\r\n    if (indexOf === -1) {\r\n      throw new Error(`removeEntity(): entity \"${entity.name}\" not found.`)\r\n    }\r\n\r\n    this.entities.splice(indexOf, 1)\r\n  }\r\n\r\n  /**\r\n   * Gets all entities that have the target component registered.\r\n   * @param componentName - Name of the component\r\n   * @returns All entities in an array.\r\n   */\r\n  private getEntitiesFromComponent(componentName: string): Entity[] {\r\n    return this.entities.filter(entity => {\r\n      return entity.components.includes(componentName)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs all processors for it's corresponding components e.g. run the prcoessors update function.\r\n   * @returns Void if successful\r\n   */\r\n  private runProcessors(): void {\r\n    this.processors.forEach(processor => {\r\n      const entities  = this.getEntitiesFromComponent(processor.target)\r\n      const component = this.getComponent(processor.target)\r\n\r\n      processor.update(component, entities)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Run custom logic of an entity e.g. run entity.update()\r\n   * @returns Void if successful\r\n   */\r\n  private runCustomLogicOnEntities(): void {\r\n    this.entities.forEach(entity => {\r\n      if (entity.update) {\r\n        entity.update()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs all processors. This should be done per frame e.g. inside your gameloop.\r\n   * @returns Void if successful\r\n   */\r\n  update(): void {\r\n    this.runProcessors()\r\n    this.runCustomLogicOnEntities()\r\n  }\r\n}"],"names":[],"version":3,"file":"index.js.map"}