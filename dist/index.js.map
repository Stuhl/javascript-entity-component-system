{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["export type Component = {\r\n  name     : string\r\n  state    : {\r\n    [key: string]: any\r\n  }\r\n  onAttach?: Function\r\n}\r\n\r\nexport type Processor = {\r\n  name    : string\r\n  required: string[]\r\n  update(entity: Entity, components: Component[], processor: Processor): void\r\n}\r\n\r\nexport type Entity = {\r\n  name      : string\r\n  components: Component[]\r\n  processors: Processor[]\r\n}\r\n\r\n/**\r\n * The Entity Component System class.\r\n */\r\nexport class EntityComponentSystem {\r\n  /**\r\n   * All registered components\r\n   * @defaultValue []\r\n   */\r\n  components: Component[]\r\n\r\n  /**\r\n   * All registered processors\r\n   * @defaultValue []\r\n   */\r\n  processors: Processor[]\r\n\r\n  /**\r\n   * All registered entities\r\n   * @defaultValue []\r\n   */\r\n  entities: Entity[]\r\n\r\n  constructor() {\r\n    this.components = []\r\n    this.processors = []\r\n    this.entities   = []\r\n  }\r\n\r\n  /**\r\n   * Gets all registered processors.\r\n   * @returns All registered processors in an array.\r\n   */\r\n  getProcessors(): Processor[] {\r\n    return this.processors\r\n  }\r\n\r\n  /**\r\n   * Gets all components processors.\r\n   * @returns All registered components in an array.\r\n   */\r\n  getComponents(): Component[] {\r\n    return this.components\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities.\r\n   * @returns All registered entities in an array.\r\n   */\r\n  getEntities(): Entity[] {\r\n    return this.entities\r\n  }\r\n\r\n  /**\r\n   * Gets a registered processor by name.\r\n   * @param name - Name of the processor\r\n   * @returns A processor or throws an error.\r\n   */\r\n  getProcessor(name: string): Processor {\r\n    const hasProcessor = this.hasProcessor(name)\r\n\r\n    if (!hasProcessor) {\r\n      throw new Error(`getProcessor(): processor \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.processors.find((processor) => processor.name === name) as Processor\r\n  }\r\n\r\n  /**\r\n   * Gets a registered component by name.\r\n   * @param name - Name of the component\r\n   * @returns A component or throws an error.\r\n   */\r\n  getComponent(name: string): Component {\r\n    const hasComponent = this.hasComponent(name)\r\n\r\n    if (!hasComponent) {\r\n      throw new Error(`getComponent(): component \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.components.find((component) => component.name === name) as Component\r\n  }\r\n\r\n  /**\r\n   * Gets a registered entity by name.\r\n   * @param name -Name of the entity\r\n   * @returns A entity or throws an error. \r\n   */\r\n  getEntity(name: string): Entity {\r\n    const hasEntity = this.hasEntity(name)\r\n\r\n    if (!hasEntity) {\r\n      throw new Error(`getEntity(): entity \"${name}\" not found.`)\r\n    }\r\n\r\n    return this.entities.find((entity) => entity.name === name) as Entity\r\n  }\r\n\r\n  /**\r\n   * Gets all registered entities that match the given name.\r\n   * @param name -Name of the entity\r\n   * @returns An array of entities or an empty array.\r\n   */\r\n  getEntitiesByName(name: string): Entity[] {\r\n    const entities = []\r\n    const length   = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      const currentEntity = this.entities[i]\r\n\r\n      if (currentEntity.name === name) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n    \r\n    return entities\r\n  }\r\n\r\n  getEntityComponents(entity: Entity, components: string[]): Component[] {\r\n    const foundComponents = []\r\n    const length          = entity.components.length\r\n\r\n    for (let currentComponent of components) {\r\n      for (let i = 0; i < length; i++) {\r\n        const currentEntityComponent = entity.components[i]\r\n\r\n        if (currentEntityComponent.name === currentComponent) {\r\n          foundComponents.push(currentEntityComponent)\r\n        }\r\n      }\r\n    }\r\n\r\n    return foundComponents\r\n  }\r\n\r\n  /**\r\n   * Checks if processor is registered by name.\r\n   * @param name - Name of the processor\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasProcessor(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let processor of this.processors) {\r\n      if (processor.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if component is registered.\r\n   * @param name - Name of the component\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasComponent(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let component of this.components) {\r\n      if (component.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Checks if entity is registered.\r\n   * @param name - Name of the entity\r\n   * @returns true if found or false if not.\r\n   */\r\n  hasEntity(name: string): boolean {\r\n    let found = false\r\n\r\n    for (let entity of this.entities) {\r\n      if (entity.name === name) {\r\n        found = true\r\n      }\r\n    }\r\n\r\n    return found\r\n  }\r\n\r\n  /**\r\n   * Composes a entity with given components.\r\n   * @param name - Name of the entity\r\n   * @param components - An array of component names\r\n   * @param processors - An array of processor names\r\n   * @returns The composed entity or throws an error.\r\n   */\r\n  createEntity(name: string, components: string[], processors: string[]): Entity {\r\n    const entityName = name\r\n    const allComponents = []\r\n    const allProcessors = []\r\n\r\n    components.forEach(componentName => {\r\n      const foundComponent = this.getComponent(componentName)\r\n      const copy           = JSON.parse(JSON.stringify(foundComponent))\r\n\r\n      if (copy.onAttach) {\r\n        foundComponent.onAttach()\r\n      }\r\n\r\n      allComponents.push(copy)\r\n    })\r\n\r\n    processors.forEach(processorName => {\r\n      const foundProcessor = this.getProcessor(processorName)\r\n\r\n      allProcessors.push(foundProcessor)\r\n    })\r\n\r\n    return {\r\n      name: entityName,\r\n      components: allComponents,\r\n      processors: allProcessors\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target component.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns true if entity has the component or false if not\r\n   */\r\n  entityHasComponent(entity: Entity, component: string): boolean {\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Checks if an entity has target processor.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns true if entity has the processor or false if not\r\n   */\r\n  entityHasProcessor(entity: Entity, processor: string): boolean {\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Removes a component from an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation successful or throw an error.\r\n   */\r\n  removeComponentFromEntity(entity: Entity, component: string): void {\r\n    if (!this.entityHasComponent(entity, component)) {\r\n      throw new Error(`removeComponentFromEntity(): component ${component} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.components.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.components[i].name === component) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.components.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Removes processor from an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation successful or throws an error.\r\n   */\r\n  removeProcessorFromEntity(entity: Entity, processor: string): void {\r\n    if (!this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`removeProcessorFromEntity(): Processor ${processor} not found in entity ${entity.name}`)\r\n    }\r\n\r\n    let index = null\r\n    const length = entity.processors.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (entity.processors[i].name === processor) {\r\n        index = i\r\n        break\r\n      }\r\n    }\r\n\r\n    entity.processors.splice(index, 1)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to an entity.\r\n   * @param entity - entity object\r\n   * @param component - Name of component\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addComponentToEntity(entity: Entity, component: string): void {\r\n    if (this.entityHasComponent(entity, component)) {\r\n      throw new Error(`addComponentToEntity(): Can't add component ${component} - this entity already has this component.`)\r\n    }\r\n\r\n    if (!this.hasComponent(component)) {\r\n      throw new Error(`addComponentToEntity(): You can't add component ${component} to entity ${entity.name}, because the component is not registered.`)\r\n    }\r\n\r\n    entity.components.push(this.getComponent(component))\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to an entity.\r\n   * @param entity - entity object\r\n   * @param processor - Name of processor\r\n   * @returns Void if operation is successful or throws an error.\r\n   */\r\n  addProcessorToEntity(entity: Entity, processor: string): void {\r\n    if (this.entityHasProcessor(entity, processor)) {\r\n      throw new Error(`addProcessorToEntity(): Can't add processor ${processor} - this entity already this processor.`)\r\n    }\r\n\r\n    if (!this.hasProcessor(processor)) {\r\n      throw new Error(`addProcessorToEntity(): You can't add processor ${processor} to entity ${entity.name}, because the processor is not registerd.`)\r\n    }\r\n\r\n    entity.processors.push(this.getProcessor(processor))\r\n  }\r\n\r\n  /**\r\n   * Adds a entity to the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful\r\n   */\r\n  addEntity(entity: Entity): void {\r\n    this.entities.push(entity)\r\n  }\r\n\r\n  /**\r\n   * Adds a component to the system.\r\n   * @param component - component object\r\n   * @returns Void if successful\r\n   */\r\n  addComponent(component: Component): void {\r\n    const passedComponent = component as Component\r\n\r\n    if (passedComponent.onAttach) {\r\n      passedComponent.onAttach()\r\n    }\r\n\r\n    this.components.push(passedComponent)\r\n  }\r\n\r\n  /**\r\n   * Adds a processor to the system.\r\n   * @param processor - processor object\r\n   * @returns Void if successful\r\n   */\r\n  addProcessor(processor: Processor): void {\r\n    this.processors.push(processor)\r\n  }\r\n\r\n  /**\r\n   * Removes an entity from the system.\r\n   * @param entity - entity object\r\n   * @returns Void if successful or throws an error.\r\n   */\r\n  removeEntity(entity: Entity): void {\r\n    const length = this.entities.length\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      if (this.entities[i] === entity) {\r\n        this.entities.splice(i, 1)\r\n        return\r\n      }\r\n    }\r\n\r\n    throw new Error(`removeEntity(): entity \"${entity.name}\" not found.`)\r\n  }\r\n\r\n\r\n  /**\r\n   * Removes all entities from the system.\r\n   * @returns void\r\n   */\r\n  removeAllEntities(): void {\r\n    this.entities = []\r\n  }\r\n\r\n  /**\r\n   * Gets all entities that have the target component registered.\r\n   * @param componentName - Name of the component\r\n   * @returns All entities in an array.\r\n   */\r\n  private getEntitiesFromRequiredComponents(components: string[]): Entity[] {\r\n    const entities = []\r\n    let entitiesAmount = this.entities.length\r\n\r\n    for (let i = 0; i < entitiesAmount; i++) {\r\n      const currentEntity = this.entities[i]\r\n      let hasAllComponents = true\r\n\r\n      for (let j = 0; j < components.length; j++) {\r\n        const currentComponent = components[j]\r\n        \r\n        if (!this.entityHasComponent(currentEntity, currentComponent)) {\r\n          hasAllComponents = false\r\n          break\r\n        }\r\n      }\r\n\r\n      if (hasAllComponents) {\r\n        entities.push(currentEntity)\r\n      }\r\n    }\r\n\r\n    return entities\r\n  }\r\n\r\n\r\n  /**\r\n   * Runs all processors for it's corresponding components e.g. run the prcoessors update function.\r\n   * @returns Void if successful\r\n   */\r\n  private runProcessors(): void {\r\n    this.processors.forEach(processor => {\r\n      const entities     = this.getEntitiesFromRequiredComponents(processor.required)\r\n      const entityAmount = entities.length\r\n\r\n      for (let i = 0; i < entityAmount; i++) {\r\n        const currentEntity = entities[i]\r\n        const hasProcessor  = this.entityHasProcessor(currentEntity, processor.name)\r\n\r\n        if (hasProcessor) {\r\n          const components = this.getEntityComponents(currentEntity, processor.required)\r\n          processor.update(currentEntity, components, processor)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Runs all processors. This should be done per frame e.g. inside your gameloop.\r\n   * @returns Void if successful\r\n   */\r\n  update(): void {\r\n    this.runProcessors()\r\n  }\r\n}"],"names":[],"version":3,"file":"index.js.map"}